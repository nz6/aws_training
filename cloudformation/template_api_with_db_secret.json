{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Outputs": {
    "databaseuser": {
      "Description": "database use id",
      "Value": {
        "Ref": "RDSUserName"
      }
    },
    "ApiUrl": {
      "Description": "URL of your API endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ServerlessRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/Prod"
          ]
        ]
      }
    }
  },
  "Resources": {
    "mySubnetRouteTableAssociation5": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "publicSubnet1"
        },
        "RouteTableId": {
          "Ref": "CustomRouteTable"
        }
      }
    },
    "mySubnetRouteTableAssociation4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "privateLambdaSubnet2"
        },
        "RouteTableId": {
          "Ref": "myRouteTable"
        }
      }
    },
    "MyLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "cfn-rotation-lambda-role",
        "Policies": [
          {
            "PolicyName": "AWSSecretsManagerRotationPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "secretsmanager:DescribeSecret",
                    "secretsmanager:GetSecretValue",
                    "secretsmanager:PutSecretValue",
                    "secretsmanager:UpdateSecretVersionStage"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
                  },
                  "Effect": "Allow",
                  "Condition": {
                    "StringEquals": {
                      "secretsmanager:resource/AllowRotationLambdaArn": {
                        "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-rotation-lambda"
                      }
                    }
                  }
                },
                {
                  "Action": [
                    "secretsmanager:GetRandomPassword"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "kms:Decrypt",
                    "kms:DescribeKey",
                    "kms:GenerateDataKey"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "mySubnetRouteTableAssociation6": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "publicSubnet2"
        },
        "RouteTableId": {
          "Ref": "CustomRouteTable"
        }
      }
    },
    "mySubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "privateDBSubnet1"
        },
        "RouteTableId": {
          "Ref": "myRouteTable"
        }
      }
    },
    "myNAT": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "publicSubnet1"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "myEIP",
            "AllocationId"
          ]
        }
      },
      "DependsOn": "RDSVPC"
    },
    "mySubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "privateDBSubnet2"
        },
        "RouteTableId": {
          "Ref": "myRouteTable"
        }
      }
    },
    "apiGatewayRootMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "apiGateway"
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "text/html": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Content-Type": true,
              "method.response.header.Content-Length": true
            },
            "StatusCode": 200
          }
        ],
        "ResourceId": {
          "Fn::GetAtt": "apiGateway.RootResourceId"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Content-Type": "integration.response.body.headers.Content-Type",
                "method.response.header.Content-Length": "integration.response.body.headers.Content-Length"
              },
              "ResponseTemplates": {
                "text/html": "$input.path('$')"
              },
              "StatusCode": 200
            }
          ],
          "Type": "AWS",
          "Uri": {
            "Fn::Sub": [
              "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations",
              {
                "lambdaArn": {
                  "Fn::GetAtt": "LambdaRDSTest.Arn"
                }
              }
            ]
          }
        },
        "HttpMethod": "GET"
      }
    },
    "RDSLambdaManageConnectionsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "AccessDDB",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "dynamodb:*",
                  "Resource": [
                    {
                      "Fn::GetAtt": "ConnectionsCounter.Arn"
                    }
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          },
          {
            "PolicyName": "AllowMetricAdd",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "cloudwatch:PutMetricData",
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          },
          {
            "PolicyName": "AllowS3",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "s3:*",
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          },
          {
            "PolicyName": "AllowSSM",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "SSM:*",
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          },
          {
            "PolicyName": "AllowSM",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "secretsmanager:*",
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "LambdaRDSTest": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "devsecopsblog",
          "S3Key": "aws-sm-lambda-code.zip"
        },
        "Description": "Test Lambda function to access a RDS Database and read sample data",
        "VpcConfig": {
          "SubnetIds": [
            {
              "Ref": "privateLambdaSubnet1"
            },
            {
              "Ref": "privateLambdaSubnet2"
            }
          ],
          "SecurityGroupIds": [
            {
              "Ref": "LambdaSecurityGroup"
            }
          ]
        },
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "MemorySize": 128,
        "Environment": {
          "Variables": {
            "RDS_USERNAME": {
              "Ref": "RDSUserName"
            },
            "HELPER_FUNCTION_ARN": {
              "Fn::GetAtt": "LambdaRDSManageConnections.Arn"
            },
            "SECRET_NAME": {
              "Ref": "MyRDSInstanceRotationSecret"
            },
            "RDS_HOST": {
              "Fn::GetAtt": "MyDBInstance2.Endpoint.Address"
            },
            "RDS_DB_NAME": {
              "Ref": "RDSDBName"
            }
          }
        },
        "Handler": "LambdaRDS_Test_Clean.lambda_handler",
        "Role": {
          "Fn::GetAtt": "RDSLambdaTestRole.Arn"
        },
        "Timeout": 60,
        "Runtime": "python2.7"
      }
    },
    "LambdaRDSTestGetEventPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": {
          "Ref": "LambdaRDSTest"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/",
            {
              "__Stage__": "*",
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              }
            }
          ]
        }
      }
    },
    "SecretRDSInstanceAttachment": {
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
      "Properties": {
        "TargetType": "AWS::RDS::DBInstance",
        "SecretId": {
          "Ref": "MyRDSInstanceRotationSecret"
        },
        "TargetId": {
          "Ref": "MyDBInstance2"
        }
      }
    },
    "RDSLambdaTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "AllowInvoke",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "lambda:InvokeFunction",
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          },
          {
            "PolicyName": "AllowSM",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "secretsmanager:*",
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "apiGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "apiGateway"
        },
        "StageName": "Prod"
      },
      "DependsOn": [
        "apiGatewayRootMethod"
      ]
    },
    "mySubnetRouteTableAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "privateLambdaSubnet1"
        },
        "RouteTableId": {
          "Ref": "myRouteTable"
        }
      }
    },
    "LambdaRDSCFNInit": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "devsecopsblog",
          "S3Key": "aws-sm-lambda-code.zip"
        },
        "Description": "Lambda function which will execute when this CFN template is created, updated or deleted",
        "VpcConfig": {
          "SubnetIds": [
            {
              "Ref": "privateLambdaSubnet1"
            },
            {
              "Ref": "privateLambdaSubnet2"
            }
          ],
          "SecurityGroupIds": [
            {
              "Ref": "LambdaSecurityGroup"
            }
          ]
        },
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "MemorySize": 128,
        "Environment": {
          "Variables": {
            "DDB_TABLE_NAME": {
              "Ref": "ConnectionsCounter"
            },
            "RDS_USERNAME": {
              "Ref": "RDSUserName"
            },
            "SECRET_NAME": {
              "Ref": "MyRDSInstanceRotationSecret"
            },
            "RDS_HOST": {
              "Fn::GetAtt": "MyDBInstance2.Endpoint.Address"
            },
            "RDS_DB_NAME": {
              "Ref": "RDSDBName"
            }
          }
        },
        "Handler": "LambdaRDS_CFNInit_Clean.lambda_handler",
        "Role": {
          "Fn::GetAtt": "RDSLambdaCFNInitRole.Arn"
        },
        "Timeout": 60,
        "Runtime": "python2.7"
      },
      "DependsOn": [
        "myEIP",
        "mySubnetRouteTableAssociation1",
        "mySubnetRouteTableAssociation2",
        "mySubnetRouteTableAssociation3",
        "mySubnetRouteTableAssociation4",
        "mySubnetRouteTableAssociation5",
        "mySubnetRouteTableAssociation6",
        "RouteToInternet",
        "RouteToNAT",
        "RDSSecurityGroup"
      ]
    },
    "ServerlessRestApiProdStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ServerlessRestApiDeployment3752873ab0"
        },
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        },
        "StageName": "Prod"
      }
    },
    "RDSLambdaCFNInitRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "AllowSM",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "secretsmanager:*",
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          },
          {
            "PolicyName": "AccessDDB",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "dynamodb:*",
                  "Resource": [
                    {
                      "Fn::GetAtt": "ConnectionsCounter.Arn"
                    }
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "MyRotationLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "devsecopsblog",
          "S3Key": "aws-sm-lambda-code.zip"
        },
        "Description": "This is a lambda to rotate MySql user passwd",
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "Environment": {
          "Variables": {
            "SECRETS_MANAGER_ENDPOINT": {
              "Fn::Sub": "https://secretsmanager.${AWS::Region}.amazonaws.com"
            }
          }
        },
        "Handler": "mysql_secret_rotation.lambda_handler",
        "Role": {
          "Fn::GetAtt": "MyLambdaExecutionRole.Arn"
        },
        "Runtime": "python2.7",
        "FunctionName": "cfn-rotation-lambda"
      }
    },
    "CustomRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "RDSVPC"
        },
        "Tags": [
          {
            "Value": "CustomRouteTable",
            "Key": "Name"
          }
        ]
      },
      "DependsOn": "AttachInternetGateway"
    },
    "ConnectionsCounter": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "ProvisionedThroughput": {
          "WriteCapacityUnits": 10,
          "ReadCapacityUnits": 10
        },
        "AttributeDefinitions": [
          {
            "AttributeName": "RDBMSName",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "KeyType": "HASH",
            "AttributeName": "RDBMSName"
          }
        ]
      }
    },
    "LambdaRDSCFnTrigger": {
      "Version": 1.0,
      "Type": "Custom::LambdaRDS",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LambdaRDSCFNInit",
            "Arn"
          ]
        }
      }
    },
    "MyDBInstance2": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "Engine": "mysql",
        "MultiAZ": false,
        "PubliclyAccessible": false,
        "StorageType": "gp2",
        "MasterUserPassword": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "MyRDSInstanceRotationSecret"
              },
              ":SecretString:password}}"
            ]
          ]
        },
        "MasterUsername": {
          "Ref": "RDSUserName"
        },
        "VPCSecurityGroups": [
          {
            "Ref": "RDSSecurityGroup"
          }
        ],
        "AllocatedStorage": 20,
        "DBInstanceClass": "db.t2.micro",
        "DBSubnetGroupName": {
          "Ref": "myDBSubnetGroup"
        },
        "DBName": {
          "Ref": "RDSDBName"
        },
        "DBInstanceIdentifier": "rotation-instance",
        "BackupRetentionPeriod": 0
      }
    },
    "LambdaSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "RDSVPC"
        },
        "GroupDescription": "Security group for Lambda ENIs",
        "Tags": [
          {
            "Value": "LambdaSecurityGroup",
            "Key": "Name"
          }
        ]
      }
    },
    "privateDBSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Value": "privateDBSubnet1",
            "Key": "Name"
          }
        ],
        "VpcId": {
          "Ref": "RDSVPC"
        },
        "CidrBlock": "172.31.0.0/20",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "privateDBSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Value": "privateDBSubnet2",
            "Key": "Name"
          }
        ],
        "VpcId": {
          "Ref": "RDSVPC"
        },
        "CidrBlock": "172.31.16.0/20",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "RouteToNAT": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "myRouteTable"
        },
        "NatGatewayId": {
          "Ref": "myNAT"
        }
      }
    },
    "privateLambdaSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Value": "privateLambdaSubnet1",
            "Key": "Name"
          }
        ],
        "VpcId": {
          "Ref": "RDSVPC"
        },
        "CidrBlock": "172.31.32.0/20",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "privateLambdaSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Value": "privateLambdaSubnet2",
            "Key": "Name"
          }
        ],
        "VpcId": {
          "Ref": "RDSVPC"
        },
        "CidrBlock": "172.31.48.0/20",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "publicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Value": "publicSubnet1",
            "Key": "Name"
          }
        ],
        "VpcId": {
          "Ref": "RDSVPC"
        },
        "CidrBlock": "172.31.64.0/20",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "myEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "DependsOn": "AttachInternetGateway"
    },
    "apiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "rds-api",
        "Description": "My API"
      }
    },
    "publicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Value": "publicSubnet2",
            "Key": "Name"
          }
        ],
        "VpcId": {
          "Ref": "RDSVPC"
        },
        "CidrBlock": "172.31.80.0/20",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "RDSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "SecurityGroupIngress": [
          {
            "ToPort": "3306",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LambdaSecurityGroup"
            },
            "FromPort": "3306"
          }
        ],
        "VpcId": {
          "Ref": "RDSVPC"
        },
        "GroupDescription": "Allow My SQL access from lambda subnets",
        "Tags": [
          {
            "Value": "RDSSecurityGroup",
            "Key": "Name"
          }
        ]
      }
    },
    "ServerlessRestApiDeployment3752873ab0": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        },
        "Description": "RestApi deployment id: 3752873ab0879b2d251db1b424fbafb09ec74da8",
        "StageName": "Stage"
      }
    },
    "myRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "RDSVPC"
        },
        "Tags": [
          {
            "Value": "myRouteTable",
            "Key": "Name"
          }
        ]
      }
    },
    "RDSVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "CidrBlock": "172.31.0.0/16",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Value": "RDSVPC2",
            "Key": "Name"
          }
        ]
      }
    },
    "myInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Value": "myInternetGateway",
            "Key": "Name"
          }
        ]
      }
    },
    "myDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "SubnetIds": [
          {
            "Ref": "privateDBSubnet1"
          },
          {
            "Ref": "privateDBSubnet2"
          }
        ],
        "DBSubnetGroupDescription": "description",
        "Tags": [
          {
            "Value": "myDBSubnetGroup",
            "Key": "Name"
          }
        ]
      }
    },
    "LambdaRDSManageConnections": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "devsecopsblog",
          "S3Key": "aws-sm-lambda-code.zip"
        },
        "Description": "Lambda function to manage RDS connections count",
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "MemorySize": 128,
        "Environment": {
          "Variables": {
            "DDB_TABLE_NAME": {
              "Ref": "ConnectionsCounter"
            }
          }
        },
        "Handler": "LambdaRDS_ManageConnections.lambda_handler",
        "Role": {
          "Fn::GetAtt": "RDSLambdaManageConnectionsRole.Arn"
        },
        "Timeout": 60,
        "Runtime": "python2.7"
      }
    },
    "MySecretRotationSchedule": {
      "Type": "AWS::SecretsManager::RotationSchedule",
      "Properties": {
        "SecretId": {
          "Ref": "MyRDSInstanceRotationSecret"
        },
        "RotationLambdaARN": {
          "Fn::GetAtt": "MyRotationLambda.Arn"
        },
        "RotationRules": {
          "AutomaticallyAfterDays": 30
        }
      },
      "DependsOn": "SecretRDSInstanceAttachment"
    },
    "LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": "cfn-rotation-lambda",
        "Principal": "secretsmanager.amazonaws.com"
      },
      "DependsOn": "MyRotationLambda"
    },
    "AttachInternetGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "RDSVPC"
        },
        "InternetGatewayId": {
          "Ref": "myInternetGateway"
        }
      },
      "DependsOn": "myInternetGateway"
    },
    "lambdaApiGatewayInvoke": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": "LambdaRDSTest.Arn"
        },
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/"
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "MyRDSInstanceRotationSecret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "GenerateSecretString": {
          "GenerateStringKey": "password",
          "ExcludeCharacters": "\"@/\\",
          "SecretStringTemplate": {
            "Fn::Sub": "{\"username\": \"${!Ref RDSUserName}\"}"
          },
          "PasswordLength": 16
        },
        "Description": "This is my rds instance secret",
        "Tags": [
          {
            "Value": "MyApp",
            "Key": "AppNam"
          }
        ]
      }
    },
    "RouteToInternet": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "GatewayId": {
          "Ref": "myInternetGateway"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "CustomRouteTable"
        }
      }
    },
    "ServerlessRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Body": {
          "info": {
            "version": "1.0",
            "title": {
              "Ref": "AWS::StackName"
            }
          },
          "paths": {
            "/": {
              "get": {
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST",
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaRDSTest.Arn}/invocations"
                  }
                },
                "responses": {}
              }
            }
          },
          "swagger": "2.0"
        }
      }
    }
  },
  "Parameters": {
    "RDSUserName": {
      "Default": "admin",
      "Type": "String"
    },
    "RDSDBName": {
      "Default": "demodb2",
      "Type": "String"
    }
  }
}
